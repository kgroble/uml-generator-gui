digraph uml {
"DemeterViolationPattern" [
	shape = "record",
	label = <{DemeterViolationPattern|- logging: boolean<br align="left"/>|+ &lt;init&gt;(): void<br align="left"/>+ detect(graph.Graph): graph.Graph<br align="left"/>+ setArgs(java.lang.String[]): void<br align="left"/>}>
];
"client.UMLGeneratorApp" [
	shape = "record",
	label = <{client.UMLGeneratorApp||+ &lt;init&gt;(): void<br align="left"/>+ main(java.lang.String[]): void<br align="left"/>}>
];
"client.ConfigSettings" [
	shape = "record",
	label = <{client.ConfigSettings|- SETTINGS_FLAG: java.lang.String<br align="left"/>- DEFAULT_SETTINGS_FILE: java.lang.String<br align="left"/>- RECURSIVE_TAG: java.lang.String<br align="left"/>- SYNTHETIC_TAG: java.lang.String<br align="left"/>- WHITELIST_TAG: java.lang.String<br align="left"/>- BLACKLIST_TAG: java.lang.String<br align="left"/>- PATTERNS_TAG: java.lang.String<br align="left"/>- ACCESS_TAG: java.lang.String<br align="left"/>- GENERATOR_TAG: java.lang.String<br align="left"/>- EXPORTER_TAG: java.lang.String<br align="left"/>- isRecursive: boolean<br align="left"/>- showSynthetic: boolean<br align="left"/>- whiteList: java.util.List&lt;java.lang.String&gt;<br align="left"/>- blackList: java.util.List&lt;java.lang.String&gt;<br align="left"/>- patterns: java.util.List&lt;patterns.Pattern&gt;<br align="left"/>- generator: graph.GraphGenerator<br align="left"/>- accessLevel: graph.AccessLevel<br align="left"/>- properties: java.util.Properties<br align="left"/>- exporter: exporters.Exporter<br align="left"/>|  &lt;clinit&gt;(): void<br align="left"/>- &lt;init&gt;(): void<br align="left"/>+ setIsRecursive(boolean): void<br align="left"/>+ setShowSynthetic(boolean): void<br align="left"/>+ addToWhiteList(java.lang.String): void<br align="left"/>+ addToWhiteList(java.util.List&lt;java.lang.String&gt;): void<br align="left"/>+ removeFromWhiteList(java.lang.String): void<br align="left"/>+ removeFromWhiteList(java.util.List&lt;java.lang.String&gt;): void<br align="left"/>+ addToBlackList(java.lang.String): void<br align="left"/>+ addToBlackList(java.util.List&lt;java.lang.String&gt;): void<br align="left"/>+ removeFromBlackList(java.lang.String): void<br align="left"/>+ removeFromBlackList(java.util.List&lt;java.lang.String&gt;): void<br align="left"/>+ addToPatterns(patterns.Pattern): void<br align="left"/>+ addToPatterns(java.util.List&lt;patterns.Pattern&gt;): void<br align="left"/>+ removeFromPatterns(patterns.Pattern): void<br align="left"/>+ removeFromPatterns(java.util.List&lt;patterns.Pattern&gt;): void<br align="left"/>+ setGenerator(graph.GraphGenerator): void<br align="left"/>+ setAccessLevel(graph.AccessLevel): void<br align="left"/>+ setExporter(exporters.Exporter): void<br align="left"/>+ getRecursive(): boolean<br align="left"/>+ getShowSynthetic(): boolean<br align="left"/>+ getWhiteList(): java.util.List&lt;java.lang.String&gt;<br align="left"/>+ getBlackList(): java.util.List&lt;java.lang.String&gt;<br align="left"/>+ getPatterns(): java.util.List&lt;patterns.Pattern&gt;<br align="left"/>+ getGenerator(): graph.GraphGenerator<br align="left"/>+ getAccessLevel(): graph.AccessLevel<br align="left"/>+ getExporter(): exporters.Exporter<br align="left"/>+ getAssociatedVal(java.lang.String): java.lang.String<br align="left"/>+ classInBlacklist(java.lang.String): boolean<br align="left"/>+ setupConfig(java.lang.String[]): void<br align="left"/>+ makePatternFromString(java.lang.String): patterns.Pattern<br align="left"/>}>
];
"exporters.Exporter" [
	shape = "record",
	label = <{<I>exporters.Exporter</I>||+ &lt;init&gt;(): void<br align="left"/>+ setArgs(java.lang.String[]): void<br align="left"/>+ export(java.util.List&lt;graphviz.GraphvizElement&gt;): void<br align="left"/>}>
];
"exporters.FileExporter" [
	shape = "record",
	label = <{exporters.FileExporter|- outFile: java.lang.String<br align="left"/>|+ &lt;init&gt;(): void<br align="left"/>+ setArgs(java.lang.String[]): void<br align="left"/>+ export(java.util.List&lt;graphviz.GraphvizElement&gt;): void<br align="left"/>}>
];
"graph.AccessLevel" [
	shape = "record",
	label = <{graph.AccessLevel|+ PUBLIC: graph.AccessLevel<br align="left"/>+ PROTECTED: graph.AccessLevel<br align="left"/>+ PRIVATE: graph.AccessLevel<br align="left"/>- ENUM$VALUES: graph.AccessLevel[]<br align="left"/>|  &lt;clinit&gt;(): void<br align="left"/>- &lt;init&gt;(java.lang.String, int): void<br align="left"/>+ hasAccess(int, graph.AccessLevel): boolean<br align="left"/>+ values(): graph.AccessLevel[]<br align="left"/>+ valueOf(java.lang.String): graph.AccessLevel<br align="left"/>}>
];
"graph.AssociationGraphGen" [
	shape = "record",
	label = <{graph.AssociationGraphGen||+ &lt;init&gt;(): void<br align="left"/>+ &lt;init&gt;(graph.GraphGenerator): void<br align="left"/>+ genObjects(java.util.List&lt;java.lang.String&gt;, graph.Graph): boolean<br align="left"/>}>
];
"graph.ClassCell" [
	shape = "record",
	label = <{graph.ClassCell|- classNode: org.objectweb.asm.tree.ClassNode<br align="left"/>- edges: java.util.List&lt;graph.Edge&gt;<br align="left"/>- renderAccess: graph.AccessLevel<br align="left"/>|+ getRenderAccess(): graph.AccessLevel<br align="left"/>+ &lt;init&gt;(java.lang.String, graph.AccessLevel): void<br align="left"/>+ getName(): java.lang.String<br align="left"/>+ getPrettyName(): java.lang.String<br align="left"/>- parseClassTemplate(java.lang.String): java.lang.String<br align="left"/>+ getAccess(): int<br align="left"/>+ getClassNode(): org.objectweb.asm.tree.ClassNode<br align="left"/>+ getFieldNodes(): java.util.List&lt;org.objectweb.asm.tree.FieldNode&gt;<br align="left"/>+ getFieldNodes(graph.AccessLevel): java.util.List&lt;org.objectweb.asm.tree.FieldNode&gt;<br align="left"/>+ getFields(): java.util.List&lt;graph.Field&gt;<br align="left"/>+ getFields(graph.AccessLevel): java.util.List&lt;graph.Field&gt;<br align="left"/>- getMethodTypes(): java.util.List&lt;graph.Field&gt;<br align="left"/>+ getMethods(): java.util.List&lt;org.objectweb.asm.tree.MethodNode&gt;<br align="left"/>+ getMethods(graph.AccessLevel): java.util.List&lt;org.objectweb.asm.tree.MethodNode&gt;<br align="left"/>- getInnerDependencies(org.objectweb.asm.tree.MethodNode): java.util.List&lt;graph.Field&gt;<br align="left"/>+ getDependencies(): java.util.List&lt;graph.Field&gt;<br align="left"/>+ getImplements(): java.util.List&lt;org.objectweb.asm.tree.ClassNode&gt;<br align="left"/>+ getSuper(): org.objectweb.asm.tree.ClassNode<br align="left"/>+ equals(java.lang.Object): boolean<br align="left"/>+ hasNode(org.objectweb.asm.tree.ClassNode): boolean<br align="left"/>+ addEdge(graph.Edge): void<br align="left"/>+ getEdges(): java.util.List&lt;graph.Edge&gt;<br align="left"/>+ getAllRelatives(): java.util.List&lt;java.lang.String&gt;<br align="left"/>}>
];
"graph.Edge" [
	shape = "record",
	label = <{graph.Edge|- originClass: graph.ClassCell<br align="left"/>- destClass: graph.ClassCell<br align="left"/>- relation: graph.Edge$Relation<br align="left"/>- cardinality: graph.Edge$Cardinality<br align="left"/>|+ &lt;init&gt;(graph.ClassCell, graph.ClassCell, graph.Edge$Relation): void<br align="left"/>+ &lt;init&gt;(graph.ClassCell, graph.ClassCell, graph.Edge$Relation, graph.Edge$Cardinality): void<br align="left"/>+ getOrigin(): graph.ClassCell<br align="left"/>+ getDestination(): graph.ClassCell<br align="left"/>+ getRelation(): graph.Edge$Relation<br align="left"/>+ getCardinality(): graph.Edge$Cardinality<br align="left"/>}>
];
"graph.Field" [
	shape = "record",
	label = <{graph.Field|- type: org.objectweb.asm.tree.ClassNode<br align="left"/>- template: java.util.List&lt;graph.Field&gt;<br align="left"/>|+ &lt;init&gt;(java.lang.String): void<br align="left"/>+ &lt;init&gt;(graph.SignatureParser): void<br align="left"/>+ getType(): org.objectweb.asm.tree.ClassNode<br align="left"/>+ getTemplate(): java.util.List&lt;graph.Field&gt;<br align="left"/>}>
];
"graph.Graph" [
	shape = "record",
	label = <{graph.Graph|- cells: java.util.List&lt;graph.ClassCell&gt;<br align="left"/>- edges: java.util.List&lt;graph.Edge&gt;<br align="left"/>|+ &lt;init&gt;(): void<br align="left"/>- &lt;init&gt;(java.util.List&lt;graph.ClassCell&gt;, java.util.List&lt;graph.Edge&gt;): void<br align="left"/>+ addClass(graph.ClassCell): boolean<br align="left"/>+ getCells(): java.util.List&lt;graph.ClassCell&gt;<br align="left"/>+ getCellNames(): java.util.List&lt;java.lang.String&gt;<br align="left"/>+ getEdges(): java.util.List&lt;graph.Edge&gt;<br align="left"/>+ addEdge(graph.Edge): void<br align="left"/>+ copy(): graph.Graph<br align="left"/>+ containsNode(org.objectweb.asm.tree.ClassNode): graph.ClassCell<br align="left"/>+ containsEdge(graph.ClassCell, graph.ClassCell, graph.Edge$Relation): boolean<br align="left"/>+ containsEdge(graph.ClassCell, graph.ClassCell, graph.Edge$Relation, graph.Edge$Cardinality): boolean<br align="left"/>}>
];
"graph.GraphGenDecorator" [
	shape = "record",
	label = <{<I>graph.GraphGenDecorator</I>|- graphGen: graph.GraphGenerator<br align="left"/>|+ &lt;init&gt;(): void<br align="left"/>+ &lt;init&gt;(graph.GraphGenerator): void<br align="left"/>+ setInner(graph.GraphGenerator): void<br align="left"/># execute(java.util.List&lt;java.lang.String&gt;, graph.Graph): boolean<br align="left"/># genObjects(java.util.List&lt;java.lang.String&gt;, graph.Graph): boolean<br align="left"/>}>
];
"graph.GraphGenerator" [
	shape = "record",
	label = <{graph.GraphGenerator|# recursive: boolean<br align="left"/># access: graph.AccessLevel<br align="left"/>|+ &lt;init&gt;(boolean, graph.AccessLevel): void<br align="left"/>+ execute(java.util.List&lt;java.lang.String&gt;): graph.Graph<br align="left"/># execute(java.util.List&lt;java.lang.String&gt;, graph.Graph): boolean<br align="left"/>}>
];
"graph.ImplementsGraphGen" [
	shape = "record",
	label = <{graph.ImplementsGraphGen||+ &lt;init&gt;(): void<br align="left"/>+ &lt;init&gt;(graph.GraphGenerator): void<br align="left"/># genObjects(java.util.List&lt;java.lang.String&gt;, graph.Graph): boolean<br align="left"/>}>
];
"graph.SignatureParser" [
	shape = "record",
	label = <{graph.SignatureParser|- PREFIXES: char[]<br align="left"/>- typeName: java.lang.String<br align="left"/>- template: java.util.List&lt;graph.SignatureParser&gt;<br align="left"/>- parsedChars: int<br align="left"/>- isArray: boolean<br align="left"/>- isPrimitive: boolean<br align="left"/>- doesExtend: boolean<br align="left"/>- doesSuper: boolean<br align="left"/>|  &lt;clinit&gt;(): void<br align="left"/>+ parseFullSignature(java.lang.String): java.util.List&lt;graph.SignatureParser&gt;<br align="left"/>+ isPrefix(char): boolean<br align="left"/>+ &lt;init&gt;(java.lang.String): void<br align="left"/>+ getTypeName(): java.lang.String<br align="left"/>+ getIsPrimitive(): boolean<br align="left"/>+ getTemplate(): java.util.List&lt;graph.SignatureParser&gt;<br align="left"/>+ getNumParsedChars(): int<br align="left"/>+ toGraphviz(): java.lang.String<br align="left"/>}>
];
"graph.SuperGraphGen" [
	shape = "record",
	label = <{graph.SuperGraphGen||+ &lt;init&gt;(): void<br align="left"/>+ &lt;init&gt;(graph.GraphGenerator): void<br align="left"/># genObjects(java.util.List&lt;java.lang.String&gt;, graph.Graph): boolean<br align="left"/>}>
];
"graphviz.GraphvizEdge" [
	shape = "record",
	label = <{graphviz.GraphvizEdge|- fromNode: java.lang.String<br align="left"/>- toNode: java.lang.String<br align="left"/>- type: java.lang.String<br align="left"/>|+ &lt;init&gt;(java.lang.String, java.lang.String, java.lang.String): void<br align="left"/>+ toGraphviz(): java.lang.String<br align="left"/>+ getIdentifier(): java.lang.String<br align="left"/>}>
];
"graphviz.GraphvizElement" [
	shape = "record",
	label = <{<I>graphviz.GraphvizElement</I>|- BANNED_STRINGS: java.util.Map&lt;java.lang.String, java.lang.String&gt;<br align="left"/># attributes: java.util.Map&lt;java.lang.String, java.lang.String&gt;<br align="left"/>|  &lt;clinit&gt;(): void<br align="left"/>+ &lt;init&gt;(): void<br align="left"/>- initBannedStrings(): java.util.Map&lt;java.lang.String, java.lang.String&gt;<br align="left"/>+ addAttribute(java.lang.String, java.lang.String): void<br align="left"/>+ removeAttribute(java.lang.String): void<br align="left"/>+ getAttribute(java.lang.String): java.lang.String<br align="left"/>+ toGraphviz(): java.lang.String<br align="left"/>+ getIdentifier(): java.lang.String<br align="left"/>+ addOrReplaceElement(java.util.List&lt;graphviz.GraphvizElement&gt;, graphviz.GraphvizElement): void<br align="left"/># sanitizeGraphvizString(java.lang.String): java.lang.String<br align="left"/>}>
];
"graphviz.GraphvizGlobalParams" [
	shape = "record",
	label = <{graphviz.GraphvizGlobalParams||+ &lt;init&gt;(): void<br align="left"/>+ toGraphviz(): java.lang.String<br align="left"/>+ getIdentifier(): java.lang.String<br align="left"/>}>
];
"graphviz.GraphvizNode" [
	shape = "record",
	label = <{graphviz.GraphvizNode|- name: java.lang.String<br align="left"/>|+ &lt;init&gt;(java.lang.String): void<br align="left"/>+ toGraphviz(): java.lang.String<br align="left"/>+ getIdentifier(): java.lang.String<br align="left"/>}>
];
"patterns.AdapterPattern" [
	shape = "record",
	label = <{patterns.AdapterPattern||+ &lt;init&gt;(): void<br align="left"/>+ toGraphviz(graph.Graph): java.util.List&lt;graphviz.GraphvizElement&gt;<br align="left"/>+ detect(graph.Graph): graph.Graph<br align="left"/>}>
];
"patterns.AssociationPattern" [
	shape = "record",
	label = <{patterns.AssociationPattern||+ &lt;init&gt;(): void<br align="left"/>+ detect(graph.Graph): graph.Graph<br align="left"/>}>
];
"patterns.DecoratorPattern" [
	shape = "record",
	label = <{patterns.DecoratorPattern||+ &lt;init&gt;(): void<br align="left"/>+ toGraphviz(graph.Graph): java.util.List&lt;graphviz.GraphvizElement&gt;<br align="left"/>+ detect(graph.Graph): graph.Graph<br align="left"/>}>
];
"patterns.DependencyPattern" [
	shape = "record",
	label = <{patterns.DependencyPattern||+ &lt;init&gt;(): void<br align="left"/>+ detect(graph.Graph): graph.Graph<br align="left"/>}>
];
"patterns.IdentityPattern" [
	shape = "record",
	label = <{patterns.IdentityPattern||+ &lt;init&gt;(): void<br align="left"/>+ detect(graph.Graph): graph.Graph<br align="left"/>}>
];
"patterns.InheritancePattern" [
	shape = "record",
	label = <{patterns.InheritancePattern||+ &lt;init&gt;(): void<br align="left"/>+ detect(graph.Graph): graph.Graph<br align="left"/>}>
];
"patterns.MalformedDecoratorPattern" [
	shape = "record",
	label = <{patterns.MalformedDecoratorPattern||+ &lt;init&gt;(): void<br align="left"/>+ toGraphviz(graph.Graph): java.util.List&lt;graphviz.GraphvizElement&gt;<br align="left"/>+ detect(graph.Graph): graph.Graph<br align="left"/>}>
];
"patterns.ColorPatternDecorator" [
	shape = "record",
	label = <{patterns.ColorPatternDecorator|  color: java.lang.String<br align="left"/>|+ &lt;init&gt;(): void<br align="left"/>+ &lt;init&gt;(patterns.Pattern): void<br align="left"/>+ toGraphviz(graph.Graph): java.util.List&lt;graphviz.GraphvizElement&gt;<br align="left"/>+ setArgs(java.lang.String[]): void<br align="left"/>}>
];
"patterns.Parser" [
	shape = "record",
	label = <{patterns.Parser|- patterns: java.util.Map&lt;java.lang.Integer, patterns.Pattern&gt;<br align="left"/>|+ &lt;init&gt;(): void<br align="left"/>+ parseGraph(graph.Graph): java.util.List&lt;graphviz.GraphvizElement&gt;<br align="left"/>+ addPattern(patterns.Pattern, java.lang.Integer): boolean<br align="left"/>+ removePattern(patterns.Pattern): boolean<br align="left"/>}>
];
"DemeterViolationPattern" -> "patterns.Pattern"[
	arrowhead = "onormal"
];
"UnderscoreFieldPattern" -> "patterns.Pattern"[
	arrowhead = "onormal"
];
"exporters.FileExporter" -> "exporters.Exporter"[
	arrowhead = "onormal"
];
"graph.AssociationGraphGen" -> "graph.GraphGenDecorator"[
	arrowhead = "onormal"
];
"graph.GraphGenDecorator" -> "graph.GraphGenerator"[
	arrowhead = "onormal"
];
"graph.ImplementsGraphGen" -> "graph.GraphGenDecorator"[
	arrowhead = "onormal"
];
"graph.SuperGraphGen" -> "graph.GraphGenDecorator"[
	arrowhead = "onormal"
];
"graphviz.GraphvizEdge" -> "graphviz.GraphvizElement"[
	arrowhead = "onormal"
];
"graphviz.GraphvizGlobalParams" -> "graphviz.GraphvizElement"[
	arrowhead = "onormal"
];
"graphviz.GraphvizNode" -> "graphviz.GraphvizElement"[
	arrowhead = "onormal"
];
"patterns.AdapterPattern" -> "patterns.Pattern"[
	arrowhead = "onormal"
];
"patterns.AssociationPattern" -> "patterns.Pattern"[
	arrowhead = "onormal"
];
"patterns.DecoratorPattern" -> "patterns.Pattern"[
	arrowhead = "onormal"
];
"patterns.DependencyPattern" -> "patterns.Pattern"[
	arrowhead = "onormal"
];
"patterns.IdentityPattern" -> "patterns.Pattern"[
	arrowhead = "onormal"
];
"patterns.InheritancePattern" -> "patterns.Pattern"[
	arrowhead = "onormal"
];
"patterns.MalformedDecoratorPattern" -> "patterns.Pattern"[
	arrowhead = "onormal"
];
"client.ConfigSettings" -> "graph.GraphGenerator"[
	headlabel = "1",
	labeldistance = 1.7
];
"client.ConfigSettings" -> "graph.AccessLevel"[
	headlabel = "1",
	labeldistance = 1.7
];
"client.ConfigSettings" -> "exporters.Exporter"[
	headlabel = "1",
	labeldistance = 1.7
];
"graph.ClassCell" -> "graph.AccessLevel"[
	headlabel = "1",
	labeldistance = 1.7
];
"graph.ClassCell" -> "graph.Edge"[
	headlabel = "*",
	labeldistance = 1.7,
	taillabel = "1",
	dir = "both"
];
"graph.GraphGenDecorator" -> "graph.GraphGenerator"[
	headlabel = "1",
	labeldistance = 1.7
];
"graph.GraphGenerator" -> "graph.AccessLevel"[
	headlabel = "1",
	labeldistance = 1.7
];
"DemeterViolationPattern" -> "patterns.Pattern"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"DemeterViolationPattern" -> "graph.Graph"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"UnderscoreFieldPattern" -> "patterns.Pattern"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"UnderscoreFieldPattern" -> "graph.Graph"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"client.UMLGeneratorApp" -> "graph.Graph"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"client.UMLGeneratorApp" -> "patterns.Parser"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"client.ConfigSettings" -> "exporters.FileExporter"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"exporters.Exporter" -> "graphviz.GraphvizElement"[
	headlabel = "*",
	labeldistance = 1.7,
	style = "dashed"
];
"exporters.FileExporter" -> "exporters.Exporter"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"graph.AssociationGraphGen" -> "graph.GraphGenDecorator"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"graph.AssociationGraphGen" -> "graph.ClassCell"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"graph.AssociationGraphGen" -> "graph.Edge"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"graph.AssociationGraphGen" -> "graph.GraphGenerator"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"graph.ClassCell" -> "graph.SignatureParser"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"graph.ClassCell" -> "graph.Field"[
	headlabel = "*",
	labeldistance = 1.7,
	style = "dashed"
];
"graph.Edge" -> "graph.ClassCell"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"graph.Field" -> "graph.SignatureParser"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"graph.GraphGenerator" -> "graph.Graph"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"graph.GraphGenerator" -> "graph.ClassCell"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"graph.ImplementsGraphGen" -> "graph.GraphGenDecorator"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"graph.ImplementsGraphGen" -> "graph.ClassCell"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"graph.ImplementsGraphGen" -> "graph.Edge"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"graph.ImplementsGraphGen" -> "graph.GraphGenerator"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"graph.SuperGraphGen" -> "graph.GraphGenDecorator"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"graph.SuperGraphGen" -> "graph.ClassCell"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"graph.SuperGraphGen" -> "graph.Edge"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"graph.SuperGraphGen" -> "graph.GraphGenerator"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"graphviz.GraphvizEdge" -> "graphviz.GraphvizElement"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"graphviz.GraphvizGlobalParams" -> "graphviz.GraphvizElement"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"graphviz.GraphvizNode" -> "graphviz.GraphvizElement"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.AdapterPattern" -> "patterns.Pattern"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.AdapterPattern" -> "graph.Graph"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.AdapterPattern" -> "graph.Field"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.AdapterPattern" -> "graph.AccessLevel"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.AssociationPattern" -> "patterns.Pattern"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.AssociationPattern" -> "graph.Graph"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.DecoratorPattern" -> "patterns.Pattern"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.DecoratorPattern" -> "graph.Graph"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.DecoratorPattern" -> "graph.AccessLevel"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.DecoratorPattern" -> "graph.Field"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.DependencyPattern" -> "patterns.Pattern"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.DependencyPattern" -> "graph.Graph"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.DependencyPattern" -> "graph.ClassCell"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.IdentityPattern" -> "patterns.Pattern"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.IdentityPattern" -> "graph.Graph"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.InheritancePattern" -> "patterns.Pattern"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.InheritancePattern" -> "graph.Graph"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.MalformedDecoratorPattern" -> "patterns.Pattern"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.MalformedDecoratorPattern" -> "graph.Graph"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.MalformedDecoratorPattern" -> "graph.AccessLevel"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.MalformedDecoratorPattern" -> "graph.Field"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.ColorPatternDecorator" -> "patterns.Pattern"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.ColorPatternDecorator" -> "graph.Graph"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.Parser" -> "graph.Graph"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.Parser" -> "graphviz.GraphvizElement"[
	headlabel = "*",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.Pattern" -> "graphviz.GraphvizGlobalParams"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.Pattern" -> "graphviz.GraphvizNode"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.Pattern" -> "graph.SignatureParser"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.Pattern" -> "graphviz.GraphvizEdge"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.Pattern" -> "graph.Graph"[
	headlabel = "1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.Pattern" -> "graphviz.GraphvizElement"[
	headlabel = "*",
	labeldistance = 1.7,
	style = "dashed"
];
"UnderscoreFieldPattern" [
	shape = "record",
	color = "deeppink",
	label = <{UnderscoreFieldPattern|- hello_world: int<br align="left"/>|+ &lt;init&gt;(): void<br align="left"/>+ detect(graph.Graph): graph.Graph<br align="left"/>}>
];
"patterns.Pattern" [
	shape = "record",
	color = "deeppink",
	label = <{<I>patterns.Pattern</I>|- $SWITCH_TABLE$graph$Edge$Relation: int[]<br align="left"/>|+ &lt;init&gt;(): void<br align="left"/>+ toGraphviz(graph.Graph): java.util.List&lt;graphviz.GraphvizElement&gt;<br align="left"/>+ detect(graph.Graph): graph.Graph<br align="left"/>- translateMethodNode(org.objectweb.asm.tree.MethodNode): java.lang.String<br align="left"/>- getAccessChar(int): char<br align="left"/>+ setArgs(java.lang.String[]): void<br align="left"/>  $SWITCH_TABLE$graph$Edge$Relation(): int[]<br align="left"/>}>
];
color = "brown1";
rankdir = BT;
"DemeterViolationPattern" -> "graph.ClassCell"[
	headlabel = "1",
	color = "brown1",
	labeldistance = 1.7,
	style = "dashed"
];
"client.UMLGeneratorApp" -> "graph.GraphGenerator"[
	headlabel = "1",
	color = "brown1",
	labeldistance = 1.7,
	style = "dashed"
];
"client.UMLGeneratorApp" -> "exporters.Exporter"[
	headlabel = "1",
	color = "brown1",
	labeldistance = 1.7,
	style = "dashed"
];
"client.ConfigSettings" -> "patterns.Pattern"[
	headlabel = "*",
	color = "brown1",
	labeldistance = 1.7
];
"exporters.FileExporter" -> "graphviz.GraphvizElement"[
	headlabel = "*",
	color = "brown1",
	labeldistance = 1.7,
	style = "dashed"
];
"graph.Graph" -> "graph.ClassCell"[
	headlabel = "*",
	color = "brown1",
	labeldistance = 1.7
];
"graph.Graph" -> "graph.Edge"[
	headlabel = "*",
	color = "brown1",
	labeldistance = 1.7
];
"patterns.AdapterPattern" -> "graph.ClassCell"[
	headlabel = "1",
	color = "brown1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.AdapterPattern" -> "graphviz.GraphvizElement"[
	headlabel = "*",
	color = "brown1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.DecoratorPattern" -> "graph.ClassCell"[
	headlabel = "1",
	color = "brown1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.DecoratorPattern" -> "graphviz.GraphvizElement"[
	headlabel = "*",
	color = "brown1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.InheritancePattern" -> "graph.ClassCell"[
	headlabel = "1",
	color = "brown1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.MalformedDecoratorPattern" -> "graph.ClassCell"[
	headlabel = "1",
	color = "brown1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.MalformedDecoratorPattern" -> "graphviz.GraphvizElement"[
	headlabel = "*",
	color = "brown1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.ColorPatternDecorator" -> "graphviz.GraphvizElement"[
	headlabel = "*",
	color = "brown1",
	labeldistance = 1.7,
	style = "dashed"
];
"patterns.Parser" -> "patterns.Pattern"[
	headlabel = "1",
	color = "brown1",
	labeldistance = 1.7
];
"patterns.Pattern" -> "graph.ClassCell"[
	headlabel = "1",
	color = "brown1",
	labeldistance = 1.7,
	style = "dashed"
];
}
